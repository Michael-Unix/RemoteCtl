/*
 * user_main.c
 *
 *  Created on: 2017��1��18��
 *      Author: Michael
 */

#include "driver/uart.h"
#include "user_main.h"
#include "Client.h"
#include "Server.h"
//#define WORK


static uint8 nCount = 0;

void ICACHE_FLASH_ATTR
Wificonnect(void *arg)
{
    struct ip_info info;
    const char remote_ip[4] = {192, 168, 31, 196};

    nCount++;
    os_timer_disarm (&nConnect_Timer);
    /*获取当前WIFI连接状态*/
    if(STATION_GOT_IP == wifi_station_get_connect_status())
    {

        os_printf("\n \r���� AP�ɹ�!!! \r ׼����ʼ��TCP Client ����...... \n");

        /**/
        /*��ȡ����IP��ַ....��ʼ��TCP Client����*/
        wifi_get_ip_info(STATION_IF, &info);

        // my_station_client_init((struct ip_addr*)remote_ip,&info.ip,1025);

        //  my_station_server_init(&info.ip,1213);
        os_printf("你好啊哈哈哈哈哈哈哈\n");

        return ;
    }
    else if(7 <= nCount)
    {
        nCount = 0;
        os_printf("\n \r����APʧ��!!!\n");
        return ;
    }

    os_printf("\n \r������������AP!!! \n");
    os_timer_arm(&nConnect_Timer, 2000, NULL);
}


void ICACHE_FLASH_ATTR
scan_done(void *arg, STATUS status)
{
    uint8 ssid[33];
    struct station_config stationConf;

    if (status == OK)
    {
        struct bss_info *bss_link = (struct bss_info *)arg;
        bss_link = bss_link->next.stqe_next;		//ignore firstΪ��Ҫ���Ե�һ����

        while (bss_link != NULL)
        {
            os_memset(ssid, 0, 33);
            if (os_strlen(bss_link->ssid) <= 32)
            {
                os_memcpy(ssid, bss_link->ssid, os_strlen(bss_link->ssid));
            }
            else
            {
                os_memcpy(ssid, bss_link->ssid, 32);
            }
            os_printf("+CWLAP:(%d,\"%s\",%d,\""MACSTR"\",%d)\r\n",
                      bss_link->authmode, ssid, bss_link->rssi,
                      MAC2STR(bss_link->bssid), bss_link->channel);

            bss_link = bss_link->next.stqe_next;
        }
        os_printf("\n\r׼�����ӵ� MIWIFI! \n");
        /*��ɨ�赽���е�WIFI AP֮�󣬿���������Ҫ���ӵ�AP*/
        os_memcpy(&stationConf.ssid, "MIWIFI", 32);
        os_printf("\n\r SSID������� \n");
        os_memcpy(&stationConf.password, "05577881585", 64);
        os_printf("\n\r ���뿽����� \n");
        wifi_station_set_config_current (&stationConf);
        os_printf("\n\r  ������...... \n");
        wifi_station_connect();

        os_timer_setfn(&nConnect_Timer, Wificonnect, NULL);
        os_timer_arm(&nConnect_Timer, 2000, NULL);
    }
}



void ICACHE_FLASH_ATTR
to_scan(void)
{

    wifi_station_scan(NULL, scan_done);
}




void ICACHE_FLASH_ATTR
check_atation(void *arg)
{
    struct ip_info ap_ip;

    struct station_info *station = wifi_softap_get_station_info();

    struct station_info *next_station;

    os_timer_disarm(&g_Station_Check_Timer);

    /*1.�ҵ��ͻ������ӵ�IP��ַ*/

    /*��ȡ ESP8266 soft-AP �ӿ�������� station ����Ϣ������ MAC �� IP*/
    //wifi_softap_get_station_info();
    if(station)
    {
        wifi_get_ip_info(SOFTAP_IF, &ap_ip);

        /*��ʼ��ap client station*/
        my_station_client_init(&station->ip, &ap_ip.ip, 1025);

        os_free(station);
    }
    else
    {
        /*����������ʱ��*/
        os_timer_arm(&g_Station_Check_Timer, 2000, NULL);
    }
}

/*ע�� WiFi event ����ص�*/
void ICACHE_FLASH_ATTR
wifi_handle_event_cb(System_Event_t *evt)
{
    // os_printf("event %x\n", evt->event);
    switch (evt->event)
    {
    case EVENT_SOFTAPMODE_STADISCONNECTED:

        /*1.����һ����ʱ����������Ѱ��IP��ַ��Ѱ�ҵ�֮������IP����*/

        os_timer_disarm(&g_Station_Check_Timer);

        os_timer_setfn(&g_Station_Check_Timer, check_atation, NULL);

        os_timer_arm(&g_Station_Check_Timer, 2000, NULL);

        /*        os_printf("station: " MACSTR "leave, AID = %d\n",
                          MAC2STR(evt->event_info.sta_disconnected.mac),
                          evt->event_info.sta_disconnected.aid);*/
        break;
    default:
        break;
    }
}


void user_init()
{
    struct softap_config AP_config;

    uart_init(BIT_RATE_115200, BIT_RATE_115200);



    os_printf("��ʼ���С�����\n");
    os_printf("initing\n");
    wifi_set_opmode(STATION_AP);
    /*��ѯ ESP8266 WiFi soft-AP �ӿڵĵ�ǰ����*/
    wifi_softap_get_config(&AP_config);

    /*����8266�����ƺ�����*/
    os_memcpy(AP_config.ssid, "ESPWIFI", strlen("ESPWIFI"));
    os_memcpy(AP_config.password, "987654321", strlen("987654321"));

    AP_config.ssid_len = strlen("ESPWIFI");
    AP_config.authmode = AUTH_WPA_WPA2_PSK;
    AP_config.beacon_interval = 100;
    AP_config.channel = 1;
    AP_config.max_connection = 4;
    AP_config.ssid_hidden = 0;
    /*���� WiFi soft-AP ���ýӿڣ����浽 flash*/

    wifi_softap_set_config(&AP_config);

    wifi_set_event_handler_cb(wifi_handle_event_cb);

    system_init_done_cb(to_scan);
}


void user_rf_pre_init()
{
}
